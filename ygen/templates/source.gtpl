//////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                  //
// This file was generated by yasmine's ygen @ $var(datetime).                                 //
//                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////

#include "$var(state_machine_name).hpp"

$loop(namespace_open)namespace $var(namespace_name) 
{$@$@$pool

state_machine_uptr create_state_machine(const std::string& _name$loop(behavior_classes), $loop(namespace_open)$var(namespace_name)::$pool$var(behavior_class_name)& _$var(behavior_class_name) $pool)
{	
	state_machine_uptr the_state_machine = std::make_unique< $var(state_machine_type) >( _name ); 
	
	// vertices {
	sxy::composite_state& $var(root_name) = the_state_machine->get_root_state();
$template(composite_state.gtpl)	// } vertices


	// transitions {
	$loop(transitions)the_state_machine->add_transition($var(transition_event_id), $var(source_vertex), $var(target_vertex), $var(transition_kind), $template(transition_guard.gtpl), $template(transition_behavior.gtpl));
	$pool// } transitions

	return(std::move(the_state_machine));
}

$loop(namespace_close)}$@$@$pool